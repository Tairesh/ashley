from typing import List

from telebot.types import Message, Chat, User, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from ashlee import emoji, constants
from ashlee.action import Action


class Subscribecancel(Action):

    NUMBERS_EMOJI = {
        1: "1Ô∏è‚É£",
        2: "2Ô∏è‚É£",
        3: "3Ô∏è‚É£",
        4: "4Ô∏è‚É£",
        5: "5Ô∏è‚É£",
        6: "6Ô∏è‚É£",
        7: "7Ô∏è‚É£",
        8: "8Ô∏è‚É£",
        9: "9Ô∏è‚É£",
        10: "üîü",
    }

    def get_description(self) -> str:
        return '–æ—Ç–ø–∏—Å–∞—Ç—å —á–∞—Ç –æ—Ç RSS-–ª–µ–Ω—Ç—ã'

    def get_name(self) -> str:
        return emoji.INFO + ' RSS'

    def get_cmds(self) -> List[str]:
        return ['subscribe_cancel', 'subscribes_cancel', 'subscribecancel', 'subscribescancel',
                'cancel_subscribe', 'cancel_subscribes', 'cancelsubscribe', 'cancelsubscribes']

    def get_keywords(self) -> List[str]:
        return []

    def get_callback_start(self) -> str:
        return 'sc:'

    def _can_subscribe(self, chat: Chat, admin: User):
        if admin.id in constants.ADMINS:
            return True

        member = self.bot.get_chat_member(chat.id, admin.id)
        if member.can_restrict_members or member.status in {"creator", "administrator"}:
            return True

        return False

    def btn_pressed(self, call: CallbackQuery):
        chat_id = call.message.chat.id
        self.bot.send_chat_action(chat_id, 'typing')
        url = call.data[3:]
        if url == 'cancel':
            text = '\n'.join(call.message.text.split('\n')[:-1]) + '\n<i>(–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞)</i>'
            self.bot.edit_message_text(text, chat_id, call.message.message_id,
                                       reply_markup=None, parse_mode='HTML')
        else:
            self.db.delete_subscribe(chat_id, url)
            self.bot.reply_to(call.message.reply_to_message, f"{emoji.CHECK} –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {url} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            self.bot.delete_message(chat_id, call.message.message_id)

    @Action.save_data
    @Action.send_typing
    def call(self, message: Message):
        # if message.chat.id == message.from_user.id:
        #     self.bot.reply_to(message, f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        #     return

        if not self._can_subscribe(message.chat, message.from_user):
            self.bot.reply_to(message, f"{emoji.CANCEL} –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–∞—Ç–∞!")
            return

        subscribes = self.db.get_subscribes(message.chat.id)
        if len(subscribes) == 0:
            self.bot.reply_to(message, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ä–∞—Å—Å—ã–ª–∫—É!")
            return

        markup = InlineKeyboardMarkup(row_width=5)
        btns = []
        text = "<b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —ç—Ç–æ—Ç —á–∞—Ç:</b>\n\n"
        for i, sub in enumerate(subscribes):
            text += f"{i+1}. <a href=\"{sub.url}\">{sub.title}</a>\n"
            btns.append(InlineKeyboardButton(self.NUMBERS_EMOJI[i+1] if i < 10 else str(i+1),
                                             callback_data='sc:' + sub.url))
        markup.add(*btns)
        markup.add(InlineKeyboardButton(f"{emoji.CANCEL} –û—Ç–º–µ–Ω–∞", callback_data='sc:cancel'))
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–∑ —Ä–∞—Å—Å—ã–ª–æ–∫ —É–¥–∞–ª–∏—Ç—å:</b>"
        self.bot.reply_to(message, text, reply_markup=markup, parse_mode='HTML')
